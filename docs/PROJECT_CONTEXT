# FLAG - CONTEXTE PROJET (Pour l'Assistance IA)

## üìç SOURCE OFFICIELLE
**D√©p√¥t** : https://github.com/WolwX/flag

> ‚ö†Ô∏è **IMPORTANT** : Ce document d√©finit les objectifs et le design final.

---

## ‚ö° INFOS RAPIDES

- **Nom** : Flag (ou Croissantage BSoD)
- **Type** : Outil de sensibilisation √† la s√©curit√© informatique
- **Tech** : HTML / CSS / JS (Client l√©ger) + Python / Flask (Backend API simple)
- **Version actuelle** : v0.2.1.20251030 (Front-end valid√©, design BSoD conforme)
- **Phase** : Finalisation du Front-end et impl√©mentation du Backend.
- **Objectif** : Simuler un √âcran Bleu de la Mort (BSoD) pour pi√©ger les coll√®gues qui laissent leur session ouverte.
- **D√©veloppeur** : (Votre Nom / Alias)
- **Assistance IA** : Gemini

---

## üìã √âTAT ACTUEL (R√©sum√©)

**Version** : 0.2.1.20251030 - Front-end valid√©, design BSoD conforme

**Avancement** :
- ‚úÖ Design BSoD (Bleu) impl√©ment√© en CSS.
- ‚úÖ Structure HTML compl√®te et valid√©e.
- ‚úÖ Correction des probl√®mes de superposition et d'alignement (smiley, champ de saisie centr√© en bas).
- ‚è≥ Fonctionnalit√© JS de base (lecture de l'URL et validation du code) √† finaliser.
- ‚è≥ Impl√©mentation du Backend (Flask/Python) pour l'enregistrement des 'Flags' et la v√©rification du code.

**Fichiers du projet** :
1. **index.html** : Structure de la page.
2. **css/flag_style.css** : Styles (BSoD, responsive, positionnement).
3. **js/flag_script.js** : Logique client (URL, full-screen, envoi des donn√©es).
4. **app.py** (√† cr√©er) : Backend Flask pour l'API.

---

## üé® DESIGN & OBJECTIFS CL√âS

### Th√®me Visuel
- **Inspiration** : √âcran Bleu de la Mort (BSoD) de Windows 10/11.
- **Couleur Primaire** : Bleu Windows (`#0078D7`).
- **Typographie** : Claire, moderne (simulant 'Segoe UI').

### √âl√©ments d'Interface (Front-end)
- **Smiley Triste** : `:( ` (Grand, en haut √† gauche).
- **Zone d'information (QR Code)** : Positionn√©e en bas √† gauche, avec alignement strict pour √©viter la superposition.
- **Champ de Saisie** : Positionn√© et centr√© en bas de l'√©cran, pour saisir le "Code de s√©curit√©".

### Logique Fonctionnelle (Backend √† venir)
- **URL de Flag** : La page doit accepter des param√®tres dans l'URL (`?user=X&msg=Y`) pour personnaliser le pi√®ge.
- **Enregistrement** : Le Backend doit enregistrer l'√©v√©nement ("Flag") incluant l'heure, l'utilisateur pi√©g√©, et l'utilisateur qui a pos√© le Flag.
- **D√©blocage** : Un code secret doit √™tre v√©rifi√© via une API pour d√©bloquer la page.

---

## ü§ñ INSTRUCTIONS POUR L'IA

**Workflow syst√©matique** :
1. Lire ce `PROJECT_CONTEXT.txt` pour la vision globale.
2. Consulter le `PROJECT_REFERENCE.txt` pour les conventions.
3. Proc√©der √† la t√¢che demand√©e.

**Phase Actuelle** : D√©veloppement du **Backend (Python/Flask)** et finalisation du **`js/flag_script.js`**.

**Priorit√©s** :
1. Finaliser le script **`flag_script.js`** pour l'envoi des donn√©es au backend.
2. Cr√©er l'application **`app.py`** (Flask) avec un point de terminaison de r√©ception des Flags.